[000] F00 015 G00 016 [take the number at m17, put it in register F (rF). Then, take register F and store it at m15]
[001] B00 016 S00 017 [take the number at m16, put it in register A (rA), and subtract by m16. result is stored in rA]
[002] H00 016 000 000 [take rA and store it in memory at m16.]
[003] L00 018 000 000 [load constant 0 at m18 into L.]
[004] Q00 006 000 000 [if rA == rL, jump to m6, as division is finished]
[005] T00 001 000 000 [if rA > rL, jump to m1, as division is not yet finished]
[006] 500 021 900 000 [if we get here, then there's a remainder. So, print "YE REMAINDER" and halt]
[007] 500 020 900 000 [print "NO REMAINDER" and halt. This step should only be reached from m4]
[008] 000 000 000 000
[009] 000 000 000 000 
[010] 000 000 000 000 
[011] 000 000 000 000 
[012] 000 000 000 000 
[013] 000 000 000 000 
[014] 000 000 000 000 
[015] 000000000004 [original number]
[016] 000000000005 [working number]
[017] 000000000002 [divisor] 
[018] -00000000000 [constant 0 for use in comparison] 
[019] 000 000 000 000 
[020] NOREMAINDER
[021] YEREMAINDER