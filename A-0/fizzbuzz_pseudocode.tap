## INCREMENTER ##
[(B) Load m_NUMTOINCREMENT into A] 
[(A) Add m_ONE to A]
[(H) Store A in m_NUMTOINCREMENT]
[(L) Load m_HUNDRED into L]
[(T) If A > L, jump to m_HALTER]
[(H) Load A into m_NUMTODIVIDE]


## m_DIVIDE_BY_THREE ##
[(B) Load m_NUMTODIVIDE into A]
[(S) Subtract A by m_THREE]
[(H) Load A into m_NUMTODIVIDE]
[(L) Load m_ZERO into L]
[(Q) If A == L, jump to m_FIZZFLAGGER]
[(K) Move A to L and set A to 0]
[(B) Set A to m_ZERO]
[(T) if A > L, jump to m_PREP_DIVIDE_BY_FIVE]
[(U) Jump to m_DIVIDE_BY_THREE]


## m_PREP_DIVIDE_BY_FIVE ##
[(B) Load m_NUMTOINCREMENT into A]
[(H) Load A into m_NUMTODIVIDE]


## m_DIVIDE_BY_FIVE ##
[(B) Load m_NUMTODIVIDE into A]
[(S) Subtract A by m_FIVE]
[(H) Load A into m_NUMTODIVIDE]
[(L) Load m_ZERO into L]
[(Q) If A == L, jump to m_BUZZFLAGGER]
[(K) Move A to L and set A to 0]
[(B) Set A to m_ZERO]
[(T) if A > L, jump to m_PRINTER]
[(U) Jump to m_DIVIDE_BY_FIVE]


## m_PRINTER ##
[(L) Load m_ONE into L]
[(B) Load m_FIZZ_FLAG into A]
[(Q) If A == L, jump to m_FIZZ_PRINTER]
[(B) Load m_BUZZ_FLAG into A]
[(Q) If A == L, jump to m_BUZZ_PRINTER]
[(50) Print m_NUMTOINCREMENT]
[(U) Jump to m_INCREMENTER]


## m_FIZZ_FLAGGER ## 
[(F) Load 1 to f]
[(G) Store F in m_FIZZ_FLAG]
[(U) Jump to m_DIVIDE_BY_FIVE]


## m_BUZZ_FLAGGER ## 
[(F) Load 1 to F]
[(G) Store F in m_BUZZ_FLAGGER]
[(U) Jump to m_PRINTER]


## m_FIZZ_PRINTER ##
[(B) Load m_BUZZ_FLAG into A]
[(Q) if A == L, jump to m_FIZZBUZZ_PRINTER]
[(50) Print m_FIZZ]
[(U) Jump to m_INCREMENTER]


## m_BUZZ_PRINTER ##
[(50) Print m_BUZZ]
[(U) Jump to m_INCREMENTER]


## m_FIZZBUZZ_PRINTER ##
[(50) Print m_FIZZBUZZ]
[(U) Jump to m_INCREMENTER]


## HALTER ##
[(90) halt machine]


## CONSTANTS ##
m_ZERO = -00000000000
m_ONE = 00000000001
m_HUNDRED = 00000000100
m_THREE = 00000000003
m_FIVE = 00000000005
m_FIZZ = Fizz\d\d\d\d\d\d\d\r
m_BUZZ = Buzz\d\d\d\d\d\d\d\r
m_FIZZBUZZ = FizzBuzz\d\d\d\r


## VARIABLES ##
m_NUMTOINCREMENT
m_FIZZ_FLAGGER
m_FIZZ_FLAG 
m_BUZZ_FLAG